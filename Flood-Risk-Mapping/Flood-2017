/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    gsw = ee.Image("JRC/GSW1_3/GlobalSurfaceWater"),
    hydrosheds = ee.Image("WWF/HydroSHEDS/03VFDEM"),
    s2 = ee.ImageCollection("COPERNICUS/S2"),
    admin4 = ee.FeatureCollection("users/varshakamath/india-village-census-2001-AS"),
    alos = ee.Image("JAXA/ALOS/AW3D30/V2_2"),
    SRTM = ee.Image("USGS/SRTMGL1_003");
/***** End of imports. If edited, may not auto-convert in the playground. *****/


var before_start = '2017-05-01';
var before_end = '2017-05-31';
var after_start = '2017-06-02';
var after_end = '2017-08-07';


var admin3 = ee.FeatureCollection("users/varshakamath/gadm41_IND_3");

var assam = admin3.filter(ee.Filter.eq('NAME_1', 'Assam'))
var geometry = assam.geometry()
var assamGeometry = admin4.geometry()

Map.addLayer(assam, {'color': 'grey'}, 'Districts')
Map.addLayer(admin4, {'color': 'Blue'}, 'assam villages')


//############################
// Flood Mapping 2017
//############################

var collection = s1
    .filter(ee.Filter.eq('instrumentMode','IW'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation','VH'))
    .filter(ee.Filter.eq('orbitProperties_pass','DESCENDING'))
    .filter(ee.Filter.eq('resolution_meters',10))
    .filter(ee.Filter.bounds(geometry))
    .select('VH');
    
var beforeCollection = collection.filterDate(before_start,before_end);
var afterCollection = collection.filterDate(after_start,after_end);

var before = beforeCollection.mosaic().clip(geometry);
var after = afterCollection.mosaic().clip(geometry);

var beforeFiltered = ee.Image(toDB(RefinedLee(toNatural(before))));
var afterFiltered = ee.Image(toDB(RefinedLee(toNatural(after))));

Map.addLayer(beforeFiltered, {min:-25,max:0}, 'Before Filtered', false);
Map.addLayer(afterFiltered, {min:-25,max:0}, 'After Filtered', false);

var difference = afterFiltered.divide(beforeFiltered);
var diffThreshold = 1.25;

var flooded = difference.gt(diffThreshold).rename('water').selfMask();
Map.addLayer(flooded, {min:0, max:1, palette:['orange']},'Initial Flood Estimate', false);

var permanentWater = gsw.select('seasonality').gte(5).clip(geometry);
print(permanentWater)
var flooded = flooded.updateMask(permanentWater);
//Map.addLayer(permanentWater, {min:0, max:1, palette:['blue']},'Water body', false);

var slopeThreshold = 10;
var terrain = ee.Algorithms.Terrain(hydrosheds);
var slope = terrain.select('slope');
var flooded = flooded.updateMask(slope.lt(slopeThreshold));

var connectedPixelThreshold = 8;
var connections = flooded.connectedPixelCount(25);
var flooded = flooded.updateMask(connections.gt(connectedPixelThreshold));
print(flooded)
// Map.centerObject(geometry);
Map.addLayer(flooded, {min:0, max:1, palette:['Red']},'Flood Area', false);
 
 var floodedBinValue = flooded.reduceRegions({
  collection: admin4.select(['id','DID', 'NAME', 'flooded']),
  reducer: ee.Reducer.anyNonZero().setOutputs(['flooded']),
   scale: 250
   })
   
var flood = floodedBinValue.filter(ee.Filter.eq('flooded', 1)) 
var nonflood = floodedBinValue.filter(ee.Filter.eq('flooded', 0))
Map.addLayer(flood, {color: 'Blue'}, 'flooded');
Map.addLayer(nonflood, {color: 'Yellow'}, 'non flooded');


// Export.table.toDrive({
//   collection: floodedBinValue,
//   description:'Flood_2017_slope_10',
//   fileFormat: 'CSV'
// });


//#############################
// Spectral indicies extraction
//#############################

/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}


var filtered = s2.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .filter(ee.Filter.date('2017-05-01', '2017-12-01'))
  .filter(ee.Filter.bounds(assamGeometry))
  .map(maskS2clouds)
  .select('B.*');

print(filtered.size());

var Terrain = ee.call('Terrain',SRTM);
print(Terrain)

var addIndices = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
  var ndbi = image.normalizedDifference(['B11', 'B8']).rename(['ndbi']);
  var ndwi = image.normalizedDifference(['B3', 'B8']).rename(['ndwi']); 
  var elev = SRTM.select('elevation').rename('elev');
  var slope = ee.Terrain.slope(elev).rename('slope');
  return image.addBands(ndvi).addBands(ndbi).addBands(ndwi).addBands(elev).addBands(slope);
}

var withIndices = filtered.map(addIndices);
var composite = withIndices.median()
print(composite)

var Water_bodies = ee.ImageCollection('JRC/GSW1_3/YearlyHistory').filterBounds(geometry);
var water = Water_bodies.filterBounds(geometry)
  .sort("CLOUD_COVERAGE_ASSESMENT")
  .first()
  .clip(geometry);

print(water)

Map.addLayer(water, {palette: ['Blue']}, 'water')


var dist = water.select('waterClass').eq(0)
  .distance({kernel: ee.Kernel.euclidean(50000,"meters"), skipMasked: false})
  .clip(geometry)
  .rename('distance');

var imageVisParam = {"opacity":1,
                    "bands":["distance"],
                    "min":0,
                    "max":15000,
                    "palette":["22ff20","1a35ff","ffa925","ff0a36","2fe1ff","fd4bff"]};

Map.addLayer(dist, imageVisParam, 'distance');

var ndviMean = composite.select('ndvi').reduceRegions({
  collection: admin4.select(['id','DID']),
  reducer: ee.Reducer.mean().setOutputs(['ndvi']),
  scale: 250
  })
  
var ndbiMean = composite.select('ndbi').reduceRegions({
  collection: admin4.select(['id','DID']),
  reducer: ee.Reducer.mean().setOutputs(['ndbi']),
  scale: 250
  });

var ndwiMean = composite.select('ndwi').reduceRegions({
  collection: admin4.select(['id','DID']),
  reducer: ee.Reducer.mean().setOutputs(['ndwi']),
  scale: 250
  });
  
var elevMean = composite.select('elev').reduceRegions({
  collection: admin4.select(['id','DID']),
  reducer: ee.Reducer.mean().setOutputs(['elev']),
  scale: 250
  });
  
var slopeMean = composite.select('slope').reduceRegions({
  collection: admin4.select(['id','DID']),
  reducer: ee.Reducer.mean().setOutputs(['slope']),
  scale: 250
  });  
  
var distanceMean = dist.select('waterClass').reduceRegions({
  collection: admin4.select(['id','DID']),
  reducer: ee.Reducer.mean().setOutputs(['distance']),
  scale: 250
  }); 
  
//Export the FeatureCollection to a KML file.
// Export.table.toDrive({
//   collection: ndviMean,
//   description:'NDVI_2017',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: ndbiMean,
//   description:'NDBI_2017',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: ndwiMean,
//   description:'NDWI_2017_new',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: elevMean,
//   description:'ELEV_2017',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: slopeMean,
//   description:'SLOPE_2017',
//   fileFormat: 'CSV'
// });

// Export.table.toDrive({
//   collection: distanceMean,
//   description:'DIST_2017',
//   fileFormat: 'CSV'
// });


//############################
// Speckle Filtering Functions
//############################

//Applying a Refined Lee Speckle filter as coded in the SNAP 3.0 S1TBX:

//https://github.com/senbox-org/s1tbx/blob/master/s1tbx-op-sar-processing/src/main/java/org/esa/s1tbx/sar/gpf/filtering/SpeckleFilters/RefinedLee.java
//Adapted by Guido Lemoine

// by Guido Lemoine
function toNatural(img) {
  return ee.Image(10.0).pow(img.select(0).divide(10.0));
}

function toDB(img) {
  return ee.Image(img).log10().multiply(10.0);
}

function RefinedLee(img) {
  // img must be in natural units, i.e. not in dB!
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1,3),3);
  var kernel3 = ee.Kernel.fixed(3,3, weights3, 1, 1, false);

  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);

  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0], [0,1,0,1,0,1,0], [0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0]]);

  var sample_kernel = ee.Kernel.fixed(7,7, sample_weights, 3,3, false);

  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);

  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());

  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());

  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);

  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);

  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));

  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);

  // "collapse" the stack into a singe band image (due to masking, each pixel has just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  

  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);

  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));

  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0,0,5).arrayReduce(ee.Reducer.mean(), [0]);

  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0,7),3).cat(ee.List.repeat(ee.List.repeat(1,7),4));

  var diag_weights = ee.List([[1,0,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,0,0,0,0], 
    [1,1,1,1,0,0,0], [1,1,1,1,1,0,0], [1,1,1,1,1,1,0], [1,1,1,1,1,1,1]]);

  var rect_kernel = ee.Kernel.fixed(7,7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7,7, diag_weights, 3, 3, false);

  // Create stacks for mean and variance using the original kernels. Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel).updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel).updateMask(directions.eq(1));

  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel).updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel).updateMask(directions.eq(2)));

  // and add the bands for rotated kernels
  for (var i=1; i<4; i++) {
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
  }

  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());

  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0));

  var b = varX.divide(dir_var);

  var result = dir_mean.add(b.multiply(img.subtract(dir_mean)));
  return(result.arrayFlatten([['sum']]));
}
